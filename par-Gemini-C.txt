You've outlined a clear process for constructing a phylogenetic tree using the Fitch parsimony algorithm. Let's apply it to your sequences:

H: TTAGCTACT
C: CTAGCTCCC
G: CTGGCCACT
O: CTGGACCCT

Since we're dealing with sequences, we'll apply the algorithm to each position (column) independently. This is crucial for parsimony.

Step 1: Data Preparation (Transposing the Data)

It's helpful to view the data transposed, so each column represents a character site:

|       | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
| :---- | :- | :- | :- | :- | :- | :- | :- | :- | :- |
| H | T | T | A | G | C | T | A | C | T |
| C | C | T | A | G | C | T | C | C | C |
| G | C | T | G | G | C | C | A | C | T |
| O | C | T | G | G | A | C | C | C | T |

Steps 2-5: Applying the Algorithm to Each Site

We'll illustrate the process for a few sites. Since you haven't provided specific topologies to test, we'll assume a topology and then discuss how to find the optimal one. Let's assume the topology ((H,C),(G,O)).

Example: Site 1

Leaf Nodes: H:{T}, C:{C}, G:{C}, O:{C}
Bottom-Up:
Internal Node 1 (parent of H, C): {T} ∩ {C} = {} → {T,C}
Internal Node 2 (parent of G, O): {C} ∩ {C} = {C}
Root Node (parent of Int. Node 1 & 2): {T,C} ∩ {C} = {C}
Mutation Steps:
Int. Node 1: 1 (union)
Int. Node 2: 0 (intersection)
Root Node: 1 (union, from {T,C} and {C})
Total Mutations for Site 1: 2
Example: Site 5

Leaf Nodes: H:{C}, C:{C}, G:{C}, O:{A}
Bottom-Up:
Internal Node 1 (parent of H, C): {C} ∩ {C} = {C}
Internal Node 2 (parent of G, O): {C} ∩ {A} = {} → {C,A}
Root Node (parent of Int. Node 1 & 2): {C} ∩ {C,A} = {C}
Mutation Steps:
Int. Node 1: 0
Int. Node 2: 1
Root Node: 0
Total Mutations for Site 5: 1
Example: Site 7

Leaf Nodes: H:{A}, C:{C}, G:{A}, O:{C}
Bottom-Up:
Internal Node 1 (parent of H, C): {A} ∩ {C} = {} → {A,C}
Internal Node 2 (parent of G, O): {A} ∩ {C} = {} → {A,C}
Root Node (parent of Int. Node 1 & 2): {A,C} ∩ {A,C} = {A,C}
Mutation Steps:
Int. Node 1: 1
Int. Node 2: 1
Root Node: 0
Total Mutations for Site 7: 2
Step 6: Calculating for All Sites and Topologies

You would repeat this process for all 9 sites. Then, you would repeat the entire process for all possible tree topologies. With 4 taxa (H, C, G, O), there are three unrooted bifurcating topologies:

((H,C),(G,O)) (The one we used in the examples)
((H,G),(C,O))
((H,O),(C,G))
After calculating the total mutations for each site under each topology, you sum the mutations across all sites for each topology. The topology with the lowest total number of mutations is the most parsimonious tree.

Key Points

Independent Sites: The Fitch algorithm treats each site independently.
Multiple Topologies: You must evaluate all possible topologies to find the most parsimonious one.
Unrooted vs. Rooted: The above describes finding unrooted trees. Rooting adds another layer of complexity.
By completing these steps for all sites and all topologies, you will find the most parsimonious phylogenetic tree for your sequences. This is a manual process, but it illustrates the core logic of the Fitch algorithm. Phylogenetic software packages automate this process efficiently.